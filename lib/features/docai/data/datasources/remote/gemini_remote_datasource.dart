import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'dart:typed_data';
import 'package:tell_me_doctor/features/docai/domain/entities/chat_message.dart';
import 'package:tell_me_doctor/features/doctors/domain/entities/health_center.dart';
import 'package:tell_me_doctor/features/doctors/domain/entities/medical_provider.dart';

/// Interface pour le GeminiRemoteDataSource, qui inclut la g√©n√©ration de r√©ponses textuelles et d'images.
abstract class GeminiRemoteDataSource {
  Future<ChatMessage> generateTextResponse(
      String prompt, List<ChatMessage> history);
  Future<ChatMessage> generateImageResponse(
      Uint8List imageData, String description);
}

/// Impl√©mentation de l'interface GeminiRemoteDataSource pour l'int√©gration avec le mod√®le Google Generative AI.
class GeminiRemoteDataSourceImpl implements GeminiRemoteDataSource {
  final GenerativeModel _model;
  final FirebaseFirestore _firestore;

  GeminiRemoteDataSourceImpl(String apiKey, this._firestore)
      : _model = GenerativeModel(
          model: 'gemini-1.5-flash',
          apiKey: apiKey,
          generationConfig: GenerationConfig(
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          ),
        );

  /// G√©n√®re une r√©ponse textuelle bas√©e sur un prompt et un historique de conversation.
  @override
  Future<ChatMessage> generateTextResponse(
      String prompt, List<ChatMessage> history) async {
    try {
      final language = _detectLanguage(prompt);
      final fullPrompt = _buildPrompt(prompt, history, language);
      final response = await _model.generateContent([Content.text(fullPrompt)]);

      var responseText = response.text ?? _getDefaultResponse(language);
      responseText = _removeRepetitions(responseText);

      if (!_isMedicalRelated(responseText)) {
        return ChatMessage(
          content: _getNonMedicalResponse(language),
          type: MessageType.ai,
          contentType: ContentType.text,
        );
      }

      final specialty = _determineSpecialty(responseText);
      List<MedicalProvider> doctors = [];
      if (specialty != null) {
        doctors = await _getRecommendedDoctors(specialty);
      }

      String finalResponse = responseText;
      if (doctors.isNotEmpty) {
        finalResponse += "\n\n${_getRecommendationIntro(language)}";
        finalResponse +=
            "\n${_formatProviderRecommendations(doctors, language)}";
      }

      return ChatMessage(
        content: finalResponse,
        type: MessageType.ai,
        contentType: ContentType.text,
        recommendations: doctors.isNotEmpty ? doctors : null,
      );
    } catch (e) {
      throw Exception('Error generating text response: ${e.toString()}');
    }
  }

  /// G√©n√®re une r√©ponse textuelle bas√©e sur une analyse d'image.
  @override
  Future<ChatMessage> generateImageResponse(
      Uint8List imageData, String description) async {
    try {
      final language = _detectLanguage(description);
      final medicalPrompt = _getImageAnalysisPrompt(language, description);

      final prompt = TextPart(medicalPrompt);
      final imagePart = DataPart('image/jpeg', imageData);

      final response = await _model.generateContent([
        Content.multi([prompt, imagePart])
      ]);

      final responseText = _removeRepetitions(
          response.text ?? _getDefaultImageAnalysisResponse(language));
      if (!_isMedicalRelated(responseText)) {
        return ChatMessage(
          content: _getNonMedicalImageResponse(language),
          type: MessageType.ai,
          contentType: ContentType.text,
        );
      }

      return ChatMessage(
        content: responseText,
        type: MessageType.ai,
        contentType: ContentType.text,
      );
    } catch (e) {
      throw Exception("Error analyzing the image: ${e.toString()}");
    }
  }

  /// D√©tecte la langue d'une entr√©e textuelle (anglais ou fran√ßais).
  String _detectLanguage(String text) {
    final isFrench =
        RegExp(r'^\p{Script=Latin}+$', unicode: true).hasMatch(text);
    return isFrench ? 'fr' : 'en';
  }

  /// Construit le prompt complet bas√© sur l'entr√©e de l'utilisateur, l'historique de la conversation et la langue.
  String _buildPrompt(
      String userInput, List<ChatMessage> history, String language) {
    final basePrompt = language == 'fr'
        ? "Vous √™tes un assistant m√©dical virtuel amical et comp√©tent. R√©pondez aux questions de sant√© de mani√®re concise et pr√©cise. Assurez-vous de bien comprendre la question avant de r√©pondre."
        : "You are a friendly and knowledgeable virtual medical assistant. Answer health questions concisely and accurately. Ensure you understand the question before responding.";

    final conversationHistory = history
        .take(5)
        .map((msg) =>
            "${msg.type == MessageType.user ? 'User' : 'Assistant'}: ${msg.content}")
        .join("\n");

    final exampleConversations = language == 'fr'
        ? """
        Exemples de conversations:
        Utilisateur: Bonjour, je me sens pas tr√®s bien depuis un moment.
        Assistant: Bonjour! D√©sol√© d'apprendre cela. Pouvez-vous m'en dire un peu plus sur ce que vous ressentez?

        Utilisateur: Je crois que j'ai des yeux qui me br√ªlent depuis un moment.
        Assistant: Cela semble inconfortable. Les yeux br√ªlants peuvent √™tre dus √† plusieurs raisons comme la fatigue oculaire, une allergie, ou une infection. Voici quelques conseils :
        - Reposez vos yeux en les fermant r√©guli√®rement.
        - √âvitez de toucher vos yeux avec des mains non lav√©es.
        - Utilisez des gouttes pour les yeux en vente libre pour soulager l'irritation.

        Je recommande de consulter un ophtalmologue pour un diagnostic pr√©cis. Voici quelques sp√©cialistes que je recommande:
        """
        : """
        Example conversations:
        User: Hello, I haven't been feeling well for a while.
        Assistant: Hello! I'm sorry to hear that. Could you tell me more about what you're experiencing?

        User: I think my eyes have been burning for a while.
        Assistant: That sounds uncomfortable. Burning eyes can be caused by several reasons like eye strain, an allergy, or an infection. Here are some tips:
        - Rest your eyes by closing them periodically.
        - Avoid touching your eyes with unwashed hands.
        - Use over-the-counter eye drops to relieve irritation.

        I recommend seeing an ophthalmologist for an accurate diagnosis. Here are some specialists I recommend:
        """;

    return "$basePrompt\n\n$conversationHistory\n\n$exampleConversations\n\nUser: $userInput\n\nAssistant:";
  }

  /// Supprime les r√©p√©titions d'une r√©ponse g√©n√©r√©e pour am√©liorer la lisibilit√©.
  String _removeRepetitions(String response) {
    final sentences = response.split('. ');
    final uniqueSentences = sentences.toSet().toList();
    return uniqueSentences.join('. ');
  }

  /// G√©n√®re un prompt d'analyse d'image bas√© sur la langue et la description fournie.
  String _getImageAnalysisPrompt(String language, String description) {
    return language == 'fr'
        ? """
    Vous √™tes un assistant m√©dical exp√©riment√© sp√©cialis√© dans l'analyse d'images m√©dicales. Votre t√¢che est d'analyser l'image fournie et de fournir une interpr√©tation professionnelle et inform√©e. Veuillez r√©pondre de mani√®re claire et pr√©cise.

    Directives :
    1. N'analyser que les images li√©es √† la m√©decine ou √† la sant√©.
    2. Si l'image ne semble pas √™tre de nature m√©dicale, informez l'utilisateur avec courtoisie.
    3. √âvitez de fournir un diagnostic d√©finitif. Recommandez de consulter un professionnel de sant√© pour une interpr√©tation pr√©cise.
    4. D√©crivez ce que vous observez dans l'image d'un point de vue m√©dical en utilisant un langage simple et compr√©hensible.
    5. Si vous avez des doutes sur la nature m√©dicale de l'image, exprimez votre incertitude et demandez des clarifications suppl√©mentaires.

    Description de l'image fournie : $description

    Analyse de l'image :
    """
        : """
    You are a seasoned medical assistant specializing in analyzing medical images. Your task is to analyze the provided image and offer a professional and informed interpretation. Please respond clearly and accurately.

    Guidelines:
    1. Only analyze images that are related to medicine or health.
    2. If the image does not appear to be medical in nature, politely inform the user.
    3. Avoid providing a definitive diagnosis. Recommend consulting a healthcare professional for an accurate interpretation.
    4. Describe what you observe in the image from a medical perspective using simple and understandable language.
    5. If you are unsure about the medical nature of the image, express your uncertainty and request further clarification.

    Description of the provided image: $description

    Image analysis:
    """;
  }

  /// D√©termine si une r√©ponse est li√©e √† la m√©decine.
  bool _isMedicalRelated(String text) {
    return true; // Cette m√©thode pourrait √™tre enrichie selon les besoins.
  }

  /// Obtient une r√©ponse par d√©faut pour une analyse d'image non m√©dicale.
  String _getNonMedicalResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, mais je suis ici pour vous aider uniquement avec des questions de sant√© et de m√©decine. Pouvez-vous reformuler votre question dans un contexte m√©dical ? Merci de votre compr√©hension ! üòä"
        : "I'm sorry, but I'm here to assist with health and medical questions only. Could you please rephrase your question in a medical context? Thank you for understanding! üòä";
  }

  /// Obtient une r√©ponse par d√©faut pour une image non m√©dicale.
  String _getNonMedicalImageResponse(String language) {
    return language == 'fr'
        ? "Oups ! Il semble que l'image fournie ne soit pas de nature m√©dicale. Pourriez-vous v√©rifier et confirmer qu'il s'agit bien d'une image m√©dicale ? Merci pour votre aide !"
        : "Oops! It seems that the provided image might not be medical in nature. Could you please check and confirm if it's indeed a medical image? Thank you for your assistance!";
  }

  /// R√©ponse par d√©faut en cas d'√©chec de l'analyse d'image.
  String _getDefaultImageAnalysisResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, je n'ai pas pu analyser l'image cette fois-ci. Pourriez-vous essayer √† nouveau ou fournir plus de d√©tails ? Je suis l√† pour vous aider !"
        : "I'm sorry, I couldn't analyze the image this time. Could you please try again or provide more details? I'm here to help!";
  }

  /// R√©ponse par d√©faut en cas d'√©chec de la g√©n√©ration de texte.
  String _getDefaultResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, je n'ai pas pu g√©n√©rer de r√©ponse pour l'instant. Pourriez-vous reformuler votre question ou essayer quelque chose d'autre ? Merci de votre patience !"
        : "I'm sorry, I couldn't generate a response right now. Could you please rephrase your question or try something else? Thank you for your patience!";
  }

  /// Introdction pour les recommandations.
  String _getRecommendationIntro(String language) {
    return language == 'fr'
        ? "Super ! Voici quelques professionnels de sant√© que je recommande chaleureusement :"
        : "Great! Here are some healthcare professionals I warmly recommend:";
  }

  /// Recommande les docteurs bas√©s sur la sp√©cialit√©.
  /// Recommande les docteurs bas√©s sur la sp√©cialit√©.
  Future<List<MedicalProvider>> _getRecommendedDoctors(String specialty) async {
    try {
      final querySnapshot = await _firestore
          .collection('doctors')
          .where('specialty', isEqualTo: specialty)
          .limit(3)
          .get();

      // Utiliser Future.wait pour g√©rer les op√©rations asynchrones dans map
      final doctors = await Future.wait(querySnapshot.docs.map((doc) async {
        final data = doc.data();

        // V√©rifier si un HealthCenter est associ√©
        HealthCenter? healthCenter;
        if (data.containsKey('healthCenterId')) {
          final healthCenterId = data['healthCenterId'];
          final healthCenterDoc = await _firestore
              .collection('health_centers')
              .doc(healthCenterId)
              .get();

          if (healthCenterDoc.exists) {
            final healthCenterData = healthCenterDoc.data()!;
            healthCenter = HealthCenter(
              id: healthCenterDoc.id,
              name: healthCenterData['name'] ?? '',
              address: healthCenterData['address'] ?? '',
              latitude: healthCenterData['latitude'] ?? 0.0,
              longitude: healthCenterData['longitude'] ?? 0.0,
              specialties: List<String>.from(healthCenterData['specialties'] ?? []),
            );
          }
        }

        return MedicalProvider(
          id: doc.id,
          name: data['name'] ?? '',
          specialty: data['specialty'] ?? '',
          phone: data['phone'] ?? '',
          address: data['address'] ?? '',
          latitude: data['latitude'] ?? 0.0,
          longitude: data['longitude'] ?? 0.0,
          healthCenter: healthCenter,
          rating: data['rating'] ?? 0,
        );
      }).toList());

      return doctors;
    } catch (e) {
      print('Error getting recommended doctors: $e');
      return [];
    }
  }

  /// Formatte les recommandations de fournisseurs m√©dicaux.
  String _formatProviderRecommendations(
      List<MedicalProvider> providers, String language) {
    return providers.map((provider) {
      final healthCenter = provider.healthCenter;
      final centerSpecialties = healthCenter?.specialties.join(', ') ?? '';
      return "${provider.name} (${_translateSpecialty(provider.specialty, language)})"
          "${healthCenter != null ? ' - ${healthCenter.name}' : ''}"
          "${centerSpecialties.isNotEmpty ? ' - Specialties: $centerSpecialties' : ''}"
          " - ${language == 'fr' ? 'T√©l' : 'Phone'}: ${provider.phone}"
          " - ${language == 'fr' ? 'Adresse' : 'Address'}: ${provider.address}";
    }).join('\n');
  }

  /// Traduit la sp√©cialit√© m√©dicale en fonction de la langue.
  String _translateSpecialty(String specialty, String language) {
    final translations = {
      'Ophtalmologue': {'en': 'Ophthalmologist', 'fr': 'Ophtalmologue'},
      'Dentiste': {'en': 'Dentist', 'fr': 'Dentiste'},
      'Dermatologue': {'en': 'Dermatologist', 'fr': 'Dermatologue'},
      'P√©diatre': {'en': 'Pediatrician', 'fr': 'P√©diatre'},
      'Cardiologue': {'en': 'Cardiologist', 'fr': 'Cardiologue'},
      'Orthop√©diste': {'en': 'Orthopedist', 'fr': 'Orthop√©diste'},
    };
    return translations[specialty]?[language] ?? specialty;
  }

  /// Traduit le type de lieu m√©dical en fonction de la langue.
  String _translatePlaceType(String placeType, String language) {
    final translations = {
      'H√¥pital': {'en': 'Hospital', 'fr': 'H√¥pital'},
      'Clinique': {'en': 'Clinic', 'fr': 'Clinique'},
      'Cabinet': {'en': 'Office', 'fr': 'Cabinet'},
    };
    return translations[placeType]?[language] ?? placeType;
  }

  /// D√©termine la sp√©cialit√© d'un docteur en fonction de la r√©ponse g√©n√©r√©e.
  String? _determineSpecialty(String responseText) {
    if (responseText.contains(RegExp(r'\b(eye|vision|ophtalm|oculist|ocular)\b',
        caseSensitive: false))) {
      return 'Ophtalmologue';
    } else if (responseText.contains(
        RegExp(r'\b(tooth|dent|mouth|dental)\b', caseSensitive: false))) {
      return 'Dentiste';
    } else if (responseText
        .contains(RegExp(r'\b(skin|derm|rash)\b', caseSensitive: false))) {
      return 'Dermatologue';
    } else if (responseText
        .contains(RegExp(r'\b(child|baby|pediat)\b', caseSensitive: false))) {
      return 'P√©diatre';
    } else if (responseText
        .contains(RegExp(r'\b(heart|cardi)\b', caseSensitive: false))) {
      return 'Cardiologue';
    } else if (responseText
        .contains(RegExp(r'\b(bone|joint|orthoped)\b', caseSensitive: false))) {
      return 'Orthop√©diste';
    }
    return null;
  }
}

// ================================================================
/*import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'dart:typed_data';
import 'package:tell_me_doctor/features/docai/domain/entities/chat_message.dart';
import 'package:tell_me_doctor/features/doctors/domain/entities/medical_provider.dart';

abstract class GeminiRemoteDataSource {
  Future<ChatMessage> generateTextResponse(
      String prompt, List<ChatMessage> history);
  Future<ChatMessage> generateImageResponse(
      Uint8List imageData, String description);
}

class GeminiRemoteDataSourceImpl implements GeminiRemoteDataSource {
  final GenerativeModel _model;
  final FirebaseFirestore _firestore;

  GeminiRemoteDataSourceImpl(String apiKey, this._firestore)
      : _model = GenerativeModel(
    model: 'gemini-1.5-flash',
    apiKey: apiKey,
    generationConfig: GenerationConfig(
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1024,
    ),
  );

  @override
  Future<ChatMessage> generateTextResponse(
      String prompt, List<ChatMessage> history) async {
    try {
      print("Prompt: $prompt");
      print("History: ${history.map((msg) => msg.content).toList()}");
      final language = _detectLanguage(prompt);
      final fullPrompt = _buildPrompt(prompt, history, language);

      final response = await _model.generateContent([Content.text(fullPrompt)]);

      print("1 ere √©tape avant la r√©ponse:");
      print("R√©ponse: ${response.text}");
      print("2eme √©tape apr√®s la r√©ponse:");

      var responseText = response.text ?? _getDefaultResponse(language);
      responseText = _removeRepetitions(responseText);

      if (!_isMedicalRelated(responseText)) {
        return ChatMessage(
          content: _getNonMedicalResponse(language),
          type: MessageType.ai,
          contentType: ContentType.text,
        );
      }

      final specialty = _determineSpecialty(prompt);
      List<MedicalProvider> doctors = [];
      if (specialty != null) {
        doctors = await _getRecommendedDoctors(specialty);
      }

      String finalResponse = responseText;
      if (doctors.isNotEmpty) {
        finalResponse += "\n\n${_getRecommendationIntro(language)}";
        finalResponse += "\n${_formatProviderRecommendations(doctors, language)}";
      }

      return ChatMessage(
        content: finalResponse,
        type: MessageType.ai,
        contentType: ContentType.text,
        recommendations: doctors.isNotEmpty ? doctors : null,
      );
    } catch (e) {
      print('Error generating text response: ${e.toString()}');
      throw ServerException('Error generating text response: ${e.toString()}');
    }
  }

  @override
  Future<ChatMessage> generateImageResponse(
      Uint8List imageData, String description) async {
    try {
      final language = _detectLanguage(description);
      final medicalPrompt = _getImageAnalysisPrompt(language, description);

      final prompt = TextPart(medicalPrompt);
      final imagePart = DataPart('image/jpeg', imageData);

      final response = await _model.generateContent([
        Content.multi([prompt, imagePart])
      ]);

      final responseText = _removeRepetitions(
          response.text ?? _getDefaultImageAnalysisResponse(language));
      if (!_isMedicalRelated(responseText)) {
        return ChatMessage(
            content: _getNonMedicalImageResponse(language),
            type: MessageType.ai,
            contentType: ContentType.text);
      }

      return ChatMessage(
          content: responseText,
          type: MessageType.ai,
          contentType: ContentType.text);
    } catch (e) {
      throw ServerException("Error analyzing the image: ${e.toString()}");
    }
  }

  String _detectLanguage(String text) {
    final isFrench = RegExp(r'^\p{Script=Latin}+$', unicode: true).hasMatch(text);
    return isFrench ? 'fr' : 'en';
  }

  String _buildPrompt(
      String userInput, List<ChatMessage> history, String language) {
    final basePrompt = language == 'fr'
        ? "Vous √™tes un assistant m√©dical virtuel amical et comp√©tent. R√©pondez aux questions de sant√© de mani√®re concise et pr√©cise. Assurez-vous de bien comprendre la question avant de r√©pondre."
        : "You are a friendly and knowledgeable virtual medical assistant. Answer health questions concisely and accurately. Ensure you understand the question before responding.";

    final conversationHistory = history
        .take(5)
        .map((msg) =>
    "${msg.type == MessageType.user ? 'User' : 'Assistant'}: ${msg.content}")
        .join("\n");

    return "$basePrompt\n\n$conversationHistory\n\nUser: $userInput\n\nAssistant:";
  }

  String _removeRepetitions(String response) {
    final sentences = response.split('. ');
    final uniqueSentences = sentences.toSet().toList();
    return uniqueSentences.join('. ');
  }

  String _getImageAnalysisPrompt(String language, String description) {
    if (language == 'fr') {
      return """
    Vous √™tes un assistant m√©dical exp√©riment√© sp√©cialis√© dans l'analyse d'images m√©dicales. Votre t√¢che est d'analyser l'image fournie et de fournir une interpr√©tation professionnelle et inform√©e. Veuillez r√©pondre de mani√®re claire et pr√©cise.

    Directives :
    1. N'analyser que les images li√©es √† la m√©decine ou √† la sant√©.
    2. Si l'image ne semble pas √™tre de nature m√©dicale, informez l'utilisateur avec courtoisie.
    3. √âvitez de fournir un diagnostic d√©finitif. Recommandez de consulter un professionnel de sant√© pour une interpr√©tation pr√©cise.
    4. D√©crivez ce que vous observez dans l'image d'un point de vue m√©dical en utilisant un langage simple et compr√©hensible.
    5. Si vous avez des doutes sur la nature m√©dicale de l'image, exprimez votre incertitude et demandez des clarifications suppl√©mentaires.

    Description de l'image fournie : $description

    Analyse de l'image :
    """;
    } else {
      return """
    You are a seasoned medical assistant specializing in analyzing medical images. Your task is to analyze the provided image and offer a professional and informed interpretation. Please respond clearly and accurately.

    Guidelines:
    1. Only analyze images that are related to medicine or health.
    2. If the image does not appear to be medical in nature, politely inform the user.
    3. Avoid providing a definitive diagnosis. Recommend consulting a healthcare professional for an accurate interpretation.
    4. Describe what you observe in the image from a medical perspective using simple and understandable language.
    5. If you are unsure about the medical nature of the image, express your uncertainty and request further clarification.

    Description of the provided image: $description

    Image analysis:
    """;
    }
  }

  bool _isMedicalRelated(String text) {
    final medicalKeywords = [
      'health', 'medicine', 'disease', 'symptom', 'treatment', 'diagnosis',
      'medication', 'therapy', 'surgery', 'patient', 'doctor', 'hospital',
      'clinic', 'virus', 'bacteria', 'infection', 'pain', 'prevention',
      'healing', 'recovery', 'well-being', 'anatomy', 'physiology', 'fever',
      'cough', 'cold', 'flu', 'asthma', 'allergy', 'diabetes', 'hypertension',
      'cardiac', 'heart', 'depression', 'anxiety', 'migraine', 'cancer',
      'vaccine', 'nutrition', 'chronic illness', 'inflammation', 'fracture',
      'burn', 'hemorrhage', 'epidemic', 'pandemic', 'emergency', 'care',
      'consultation', 'prescription', 'generalist', 'specialist', 'pharmacy',
      'eczema', 'rash', 'lesion', 'fatigue', 'stress', 'therapy', 'psychology',
      'surgery', 'operation', 'intensive care', 'ICU', 'pediatrics', 'oncology',
      'neurology', 'cardiology', 'gynecology', 'urology', 'dermatology',
      'gastroenterology', 'orthopedics', 'pulmonology', 'endocrinology',
      'hematology', 'nephrology', 'rheumatology', 'ophthalmology', 'ent',
      'otolaryngology'
    ];

    final textLower = text.toLowerCase();
    return medicalKeywords.any((keyword) => textLower.contains(keyword));
  }

  String _getNonMedicalResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, mais je suis ici pour vous aider uniquement avec des questions de sant√© et de m√©decine. Pouvez-vous reformuler votre question dans un contexte m√©dical ? Merci de votre compr√©hension ! üòä"
        : "I'm sorry, but I'm here to assist with health and medical questions only. Could you please rephrase your question in a medical context? Thank you for understanding! üòä";
  }

  String _getNonMedicalImageResponse(String language) {
    return language == 'fr'
        ? "Oups ! Il semble que l'image fournie ne soit pas de nature m√©dicale. Pourriez-vous v√©rifier et confirmer qu'il s'agit bien d'une image m√©dicale ? Merci pour votre aide !"
        : "Oops! It seems that the provided image might not be medical in nature. Could you please check and confirm if it's indeed a medical image? Thank you for your assistance!";
  }

  String _getDefaultImageAnalysisResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, je n'ai pas pu analyser l'image cette fois-ci. Pourriez-vous essayer √† nouveau ou fournir plus de d√©tails ? Je suis l√† pour vous aider !"
        : "I'm sorry, I couldn't analyze the image this time. Could you please try again or provide more details? I'm here to help!";
  }

  String _getDefaultResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, je n'ai pas pu g√©n√©rer de r√©ponse pour l'instant. Pourriez-vous reformuler votre question ou essayer quelque chose d'autre ? Merci de votre patience !"
        : "I'm sorry, I couldn't generate a response right now. Could you please rephrase your question or try something else? Thank you for your patience!";
  }

  String _getRecommendationIntro(String language) {
    return language == 'fr'
        ? "Super ! Voici quelques professionnels de sant√© que je recommande chaleureusement :"
        : "Great! Here are some healthcare professionals I warmly recommend:";
  }

  Future<List<MedicalProvider>> _getRecommendedDoctors(String specialty) async {
    try {
      final querySnapshot = await _firestore
          .collection('doctors')
          .where('specialty', isEqualTo: specialty)
          .limit(3)
          .get();

      return querySnapshot.docs.map((doc) {
        final data = doc.data();
        return MedicalProvider(
          id: doc.id,
          name: data['name'] ?? '',
          specialty: data['specialty'] ?? '',
          phone: data['phone'] ?? '',
          address: data['address'] ?? '',
          latitude: data['latitude'] ?? 0.0,
          longitude: data['longitude'] ?? 0.0,
          placeName: data['placeName'],
          placeType: data['placeType'],
        );
      }).toList();
    } catch (e) {
      print('Error getting recommended doctors: $e');
      return [];
    }
  }

  String _formatProviderRecommendations(
      List<MedicalProvider> providers, String language) {
    return providers
        .map((provider) =>
    "${provider.name} (${_translateSpecialty(provider.specialty, language)})"
        "${provider.placeName != null ? ' - ${provider.placeName}' : ''}"
        "${provider.placeType != null ? ' (${_translatePlaceType(provider.placeType!, language)})' : ''}"
        " - ${language == 'fr' ? 'T√©l' : 'Phone'}: ${provider.phone}"
        " - ${language == 'fr' ? 'Adresse' : 'Address'}: ${provider.address}")
        .join('\n');
  }

  String _translateSpecialty(String specialty, String language) {
    final translations = {
      'Ophtalmologue': {'en': 'Ophthalmologist', 'fr': 'Ophtalmologue'},
      'Dentiste': {'en': 'Dentist', 'fr': 'Dentiste'},
      'Dermatologue': {'en': 'Dermatologist', 'fr': 'Dermatologue'},
      'P√©diatre': {'en': 'Pediatrician', 'fr': 'P√©diatre'},
      'Cardiologue': {'en': 'Cardiologist', 'fr': 'Cardiologue'},
      'Orthop√©diste': {'en': 'Orthopedist', 'fr': 'Orthop√©diste'},
    };
    return translations[specialty]?[language] ?? specialty;
  }

  String _translatePlaceType(String placeType, String language) {
    final translations = {
      'H√¥pital': {'en': 'Hospital', 'fr': 'H√¥pital'},
      'Clinique': {'en': 'Clinic', 'fr': 'Clinique'},
      'Cabinet': {'en': 'Office', 'fr': 'Cabinet'},
    };
    return translations[placeType]?[language] ?? placeType;
  }

  String? _determineSpecialty(String prompt) {
    prompt = prompt.toLowerCase();
    if (prompt.contains('yeux') ||
        prompt.contains('vision') ||
        prompt.contains('eye') ||
        prompt.contains('sight')) {
      return 'Ophtalmologue';
    } else if (prompt.contains('dent') ||
        prompt.contains('bouche') ||
        prompt.contains('tooth') ||
        prompt.contains('mouth')) {
      return 'Dentiste';
    } else if (prompt.contains('peau') ||
        prompt.contains('√©ruption') ||
        prompt.contains('skin') ||
        prompt.contains('rash')) {
      return 'Dermatologue';
    } else if (prompt.contains('enfant') ||
        prompt.contains('b√©b√©') ||
        prompt.contains('child') ||
        prompt.contains('baby')) {
      return 'P√©diatre';
    } else if (prompt.contains('coeur') || prompt.contains('heart')) {
      return 'Cardiologue';
    } else if (prompt.contains('os') ||
        prompt.contains('articulation') ||
        prompt.contains('bone') ||
        prompt.contains('joint')) {
      return 'Orthop√©diste';
    }
    return null;
  }
}*/

// ===================================================================

/*
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'dart:typed_data';
import 'package:tell_me_doctor/features/docai/domain/entities/chat_message.dart';
import 'package:tell_me_doctor/features/doctors/domain/entities/medical_provider.dart';

abstract class GeminiRemoteDataSource {
  Future<ChatMessage> generateTextResponse(
      String prompt, List<ChatMessage> history);
  Future<ChatMessage> generateImageResponse(
      Uint8List imageData, String description);
}

class GeminiRemoteDataSourceImpl implements GeminiRemoteDataSource {
  final GenerativeModel _model;
  final FirebaseFirestore _firestore;

  GeminiRemoteDataSourceImpl(String apiKey, this._firestore)
      : _model = GenerativeModel(
    model: 'gemini-1.5-flash',
    apiKey: apiKey,
    generationConfig: GenerationConfig(
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1024,
    ),
  );

  @override
  Future<ChatMessage> generateTextResponse(
      String prompt, List<ChatMessage> history) async {
    try {
      print("Prompt: $prompt");
      print("History: ${history.map((msg) => msg.content).toList()}");
      final language = _detectLanguage(prompt);
      final fullPrompt = _buildPrompt(prompt, history, language);

      final response = await _model.generateContent([Content.text(fullPrompt)]);

      print("1 ere √©tape avant la r√©ponse:");
      print("R√©ponse: ${response.text}");
      print("2eme √©tape apr√®s la r√©ponse:");

      var responseText = response.text ?? _getDefaultResponse(language);
      responseText = _removeRepetitions(responseText);

      if (!_isMedicalRelated(responseText)) {
        return ChatMessage(
          content: _getNonMedicalResponse(language),
          type: MessageType.ai,
          contentType: ContentType.text,
        );
      }

      final specialty = _determineSpecialty(prompt);
      List<MedicalProvider> doctors = [];
      if (specialty != null) {
        doctors = await _getRecommendedDoctors(specialty);
      }

      String finalResponse = responseText;
      if (doctors.isNotEmpty) {
        finalResponse += "\n\n${_getRecommendationIntro(language)}";
        finalResponse += "\n${_formatProviderRecommendations(doctors, language)}";
      }

      return ChatMessage(
        content: finalResponse,
        type: MessageType.ai,
        contentType: ContentType.text,
        recommendations: doctors.isNotEmpty ? doctors : null,
      );
    } catch (e) {
      print('Error generating text response: ${e.toString()}');
      throw ServerException('Error generating text response: ${e.toString()}');
    }
  }

  @override
  Future<ChatMessage> generateImageResponse(
      Uint8List imageData, String description) async {
    try {
      final language = _detectLanguage(description);
      final medicalPrompt = _getImageAnalysisPrompt(language, description);

      final prompt = TextPart(medicalPrompt);
      final imagePart = DataPart('image/jpeg', imageData);

      final response = await _model.generateContent([
        Content.multi([prompt, imagePart])
      ]);

      final responseText = _removeRepetitions(
          response.text ?? _getDefaultImageAnalysisResponse(language));
      if (!_isMedicalRelated(responseText)) {
        return ChatMessage(
            content: _getNonMedicalImageResponse(language),
            type: MessageType.ai,
            contentType: ContentType.text);
      }

      return ChatMessage(
          content: responseText,
          type: MessageType.ai,
          contentType: ContentType.text);
    } catch (e) {
      throw ServerException("Error analyzing the image: ${e.toString()}");
    }
  }

  String _detectLanguage(String text) {
    final isFrench = RegExp(r'^\p{Script=Latin}+$', unicode: true).hasMatch(text);
    return isFrench ? 'fr' : 'en';
  }

  String _buildPrompt(
      String userInput, List<ChatMessage> history, String language) {
    final basePrompt = language == 'fr'
        ? "Vous √™tes un assistant m√©dical virtuel amical et comp√©tent. R√©pondez aux questions de sant√© de mani√®re concise et pr√©cise. Assurez-vous de bien comprendre la question avant de r√©pondre."
        : "You are a friendly and knowledgeable virtual medical assistant. Answer health questions concisely and accurately. Ensure you understand the question before responding.";

    final conversationHistory = history
        .take(5)
        .map((msg) =>
    "${msg.type == MessageType.user ? 'User' : 'Assistant'}: ${msg.content}")
        .join("\n");

    return "$basePrompt\n\n$conversationHistory\n\nUser: $userInput\n\nAssistant:";
  }

  String _removeRepetitions(String response) {
    final sentences = response.split('. ');
    final uniqueSentences = sentences.toSet().toList();
    return uniqueSentences.join('. ');
  }

  String _getImageAnalysisPrompt(String language, String description) {
    if (language == 'fr') {
      return """
    Vous √™tes un assistant m√©dical exp√©riment√© sp√©cialis√© dans l'analyse d'images m√©dicales. Votre t√¢che est d'analyser l'image fournie et de fournir une interpr√©tation professionnelle et inform√©e. Veuillez r√©pondre de mani√®re claire et pr√©cise.

    Directives :
    1. N'analyser que les images li√©es √† la m√©decine ou √† la sant√©.
    2. Si l'image ne semble pas √™tre de nature m√©dicale, informez l'utilisateur avec courtoisie.
    3. √âvitez de fournir un diagnostic d√©finitif. Recommandez de consulter un professionnel de sant√© pour une interpr√©tation pr√©cise.
    4. D√©crivez ce que vous observez dans l'image d'un point de vue m√©dical en utilisant un langage simple et compr√©hensible.
    5. Si vous avez des doutes sur la nature m√©dicale de l'image, exprimez votre incertitude et demandez des clarifications suppl√©mentaires.

    Description de l'image fournie : $description

    Analyse de l'image :
    """;
    } else {
      return """
    You are a seasoned medical assistant specializing in analyzing medical images. Your task is to analyze the provided image and offer a professional and informed interpretation. Please respond clearly and accurately.

    Guidelines:
    1. Only analyze images that are related to medicine or health.
    2. If the image does not appear to be medical in nature, politely inform the user.
    3. Avoid providing a definitive diagnosis. Recommend consulting a healthcare professional for an accurate interpretation.
    4. Describe what you observe in the image from a medical perspective using simple and understandable language.
    5. If you are unsure about the medical nature of the image, express your uncertainty and request further clarification.

    Description of the provided image: $description

    Image analysis:
    """;
    }
  }

  bool _isMedicalRelated(String text) {
    final medicalKeywords = [
      'health', 'medicine', 'disease', 'symptom', 'treatment', 'diagnosis',
      'medication', 'therapy', 'surgery', 'patient', 'doctor', 'hospital',
      'clinic', 'virus', 'bacteria', 'infection', 'pain', 'prevention',
      'healing', 'recovery', 'well-being', 'anatomy', 'physiology', 'fever',
      'cough', 'cold', 'flu', 'asthma', 'allergy', 'diabetes', 'hypertension',
      'cardiac', 'heart', 'depression', 'anxiety', 'migraine', 'cancer',
      'vaccine', 'nutrition', 'chronic illness', 'inflammation', 'fracture',
      'burn', 'hemorrhage', 'epidemic', 'pandemic', 'emergency', 'care',
      'consultation', 'prescription', 'generalist', 'specialist', 'pharmacy',
      'eczema', 'rash', 'lesion', 'fatigue', 'stress', 'therapy', 'psychology',
      'surgery', 'operation', 'intensive care', 'ICU', 'pediatrics', 'oncology',
      'neurology', 'cardiology', 'gynecology', 'urology', 'dermatology',
      'gastroenterology', 'orthopedics', 'pulmonology', 'endocrinology',
      'hematology', 'nephrology', 'rheumatology', 'ophthalmology', 'ent',
      'otolaryngology'
    ];

    final textLower = text.toLowerCase();
    return medicalKeywords.any((keyword) => textLower.contains(keyword));
  }

  String _getNonMedicalResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, mais je suis ici pour vous aider uniquement avec des questions de sant√© et de m√©decine. Pouvez-vous reformuler votre question dans un contexte m√©dical ? Merci de votre compr√©hension ! üòä"
        : "I'm sorry, but I'm here to assist with health and medical questions only. Could you please rephrase your question in a medical context? Thank you for understanding! üòä";
  }

  String _getNonMedicalImageResponse(String language) {
    return language == 'fr'
        ? "Oups ! Il semble que l'image fournie ne soit pas de nature m√©dicale. Pourriez-vous v√©rifier et confirmer qu'il s'agit bien d'une image m√©dicale ? Merci pour votre aide !"
        : "Oops! It seems that the provided image might not be medical in nature. Could you please check and confirm if it's indeed a medical image? Thank you for your assistance!";
  }

  String _getDefaultImageAnalysisResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, je n'ai pas pu analyser l'image cette fois-ci. Pourriez-vous essayer √† nouveau ou fournir plus de d√©tails ? Je suis l√† pour vous aider !"
        : "I'm sorry, I couldn't analyze the image this time. Could you please try again or provide more details? I'm here to help!";
  }

  String _getDefaultResponse(String language) {
    return language == 'fr'
        ? "Je suis d√©sol√©, je n'ai pas pu g√©n√©rer de r√©ponse pour l'instant. Pourriez-vous reformuler votre question ou essayer quelque chose d'autre ? Merci de votre patience !"
        : "I'm sorry, I couldn't generate a response right now. Could you please rephrase your question or try something else? Thank you for your patience!";
  }

  String _getRecommendationIntro(String language) {
    return language == 'fr'
        ? "Super ! Voici quelques professionnels de sant√© que je recommande chaleureusement :"
        : "Great! Here are some healthcare professionals I warmly recommend:";
  }

  Future<List<MedicalProvider>> _getRecommendedDoctors(String specialty) async {
    try {
      final querySnapshot = await _firestore
          .collection('doctors')
          .where('specialty', isEqualTo: specialty)
          .limit(3)
          .get();

      return querySnapshot.docs.map((doc) {
        final data = doc.data();
        return MedicalProvider(
          id: doc.id,
          name: data['name'] ?? '',
          specialty: data['specialty'] ?? '',
          phone: data['phone'] ?? '',
          address: data['address'] ?? '',
          latitude: data['latitude'] ?? 0.0,
          longitude: data['longitude'] ?? 0.0,
          placeName: data['placeName'],
          placeType: data['placeType'],
        );
      }).toList();
    } catch (e) {
      print('Error getting recommended doctors: $e');
      return [];
    }
  }

  String _formatProviderRecommendations(
      List<MedicalProvider> providers, String language) {
    return providers
        .map((provider) =>
    "${provider.name} (${_translateSpecialty(provider.specialty, language)})"
        "${provider.placeName != null ? ' - ${provider.placeName}' : ''}"
        "${provider.placeType != null ? ' (${_translatePlaceType(provider.placeType!, language)})' : ''}"
        " - ${language == 'fr' ? 'T√©l' : 'Phone'}: ${provider.phone}"
        " - ${language == 'fr' ? 'Adresse' : 'Address'}: ${provider.address}")
        .join('\n');
  }

  String _translateSpecialty(String specialty, String language) {
    final translations = {
      'Ophtalmologue': {'en': 'Ophthalmologist', 'fr': 'Ophtalmologue'},
      'Dentiste': {'en': 'Dentist', 'fr': 'Dentiste'},
      'Dermatologue': {'en': 'Dermatologist', 'fr': 'Dermatologue'},
      'P√©diatre': {'en': 'Pediatrician', 'fr': 'P√©diatre'},
      'Cardiologue': {'en': 'Cardiologist', 'fr': 'Cardiologue'},
      'Orthop√©diste': {'en': 'Orthopedist', 'fr': 'Orthop√©diste'},
    };
    return translations[specialty]?[language] ?? specialty;
  }

  String _translatePlaceType(String placeType, String language) {
    final translations = {
      'H√¥pital': {'en': 'Hospital', 'fr': 'H√¥pital'},
      'Clinique': {'en': 'Clinic', 'fr': 'Clinique'},
      'Cabinet': {'en': 'Office', 'fr': 'Cabinet'},
    };
    return translations[placeType]?[language] ?? placeType;
  }

  String? _determineSpecialty(String prompt) {
    prompt = prompt.toLowerCase();
    if (prompt.contains('yeux') ||
        prompt.contains('vision') ||
        prompt.contains('eye') ||
        prompt.contains('sight')) {
      return 'Ophtalmologue';
    } else if (prompt.contains('dent') ||
        prompt.contains('bouche') ||
        prompt.contains('tooth') ||
        prompt.contains('mouth')) {
      return 'Dentiste';
    } else if (prompt.contains('peau') ||
        prompt.contains('√©ruption') ||
        prompt.contains('skin') ||
        prompt.contains('rash')) {
      return 'Dermatologue';
    } else if (prompt.contains('enfant') ||
        prompt.contains('b√©b√©') ||
        prompt.contains('child') ||
        prompt.contains('baby')) {
      return 'P√©diatre';
    } else if (prompt.contains('coeur') || prompt.contains('heart')) {
      return 'Cardiologue';
    } else if (prompt.contains('os') ||
        prompt.contains('articulation') ||
        prompt.contains('bone') ||
        prompt.contains('joint')) {
      return 'Orthop√©diste';
    }
    return null;
  }
}
*/
